{
  "name": "lineman",
  "description": "A grunt-based project scaffold for HTML/CSS/JS apps",
  "version": "0.1.0",
  "homepage": "https://github.com/testdouble/lineman",
  "author": {
    "name": "Justin Searls",
    "email": "justin@testdouble.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/testdouble/lineman.git"
  },
  "bugs": {
    "url": "https://github.com/testdouble/lineman/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://mit-license.org"
    }
  ],
  "bin": {
    "lineman": "./cli.js"
  },
  "main": "lineman",
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "grunt": "~0.3.10",
    "grunt-contrib": "~0.1.1",
    "whet.extend": "~0.9.7",
    "handlebars": "~1.0.4",
    "testacular": "~0.0.16"
  },
  "devDependencies": {},
  "keywords": [
    "lineman"
  ],
  "readme": "# Lineman\n\nLineman is a tool for bootstrapping fat-client webapp projects. It requires [node.js](http://nodejs.org) & [npm](http://npmjs.org) and wouldn't be possible without [grunt](https://github.com/cowboy/grunt).\n\n## Do I need Lineman?\n\nIf you're starting a new project that will be deployed as static web assets, Lineman might be a great fit for you.\n\nSome things it helps with:\n\n* Immediately compile CoffeeScript, Less, and client-side templates as you edit source files\n* Provide a development server for fast feedback\n* Concatenate & minify all your CSS & JavaScript for production\n\nJust think of it as a handful of conventions and tasks that can help you get up-and-running more quickly than deciding on path names and configuring all the requisite grunt tasks yourself.\n\n## Getting started\n\nTo get started, install Grunt & Lineman globally:\n\n``` bash\n$ npm install -g grunt lineman\n```\n\nTo create a new project, run the `lineman` binary where you'd like the project to go:\n\n``` bash\n$ lineman my-new-project\n```\n\nThis will create a new directory named \"my-new-project\" and copy in Lineman's [archetypal project](https://github.com/testdouble/lineman/tree/master/archetype).\n\nYour new project will, by default, have Lineman and [grunt-contrib](https://github.com/gruntjs/grunt-contrib) as development dependencies. To install them:\n\n``` bash\n$ cd my-new-project; npm install\n```\n\nFinally, you'll probably want to crack open your project' package.json file. That is, of course, unless you plan to give [John Doe](https://github.com/testdouble/lineman/blob/master/archetype/package.json) all the credit.\n\n## Working with Lineman\n\n### Development\n\nFrom the project directory, you can start a server at [localhost:8000](http://localhost:8000):\n\n``` bash\n$ grunt run\n```\n\nGrunt's `watch` task will monitor for file changes and Lineman will make sure that any requisite compilation & concatenation occur, based on the type and location of the file change.\n\nWith any luck, visiting the server in your browser will yield something as *beautiful* as this:\n\n![Development Screenshot](http://i.minus.com/i1vI8cdB0tRPK.png)\n\nThe Hello World code shows off JST compilation, CoffeeScript, and Less. When you edit a source file, your changes are usually reflected by the time you can refresh your browser.\n\n### Production\n\nWhen you're ready to send your application off to a remote server, just run the default grunt task.\n\n``` bash\n$ grunt\n```\n\nThe above runs a default task that produces a deployable web application in the project's `dist/` directory, ready to be deployed to production.\n\n### Cleaning\n\nTo clean the two build directories (`dist` and `generated`), just run the clean task:\n\n``` bash\n$ grunt clean\n```\n\n## Project directory structure\n\nLineman generates a very particular directory structure. It looks like this:\n\n``` bash\n.\n├── app\n│   ├── js                  # <-- JS & CoffeeScript\n│   ├── img                 # <-- images (are merged into the root of generated & dist)\n│   └── templates           # <-- client-side templates\n│       ├── homepage.us     # <-- a template used to produce the application's index.html\n│       ├── other.us        # <-- other templates will be compiled to a window.JST object\n│       └── thing.handlebar # <-- underscore & handlebars are both already set up\n├── config\n│   ├── application.js      # <-- Override application configuration\n│   └── files.js            # <-- Override named file patterns\n├── dist                    # <-- Generated, production-ready app assets\n├── generated               # <-- Generated, pre-production app assets\n├── grunt.js                # <-- gruntfile defines app's task config\n├── package.json            # <-- Project's package.json\n├── tasks                   # <-- Custom grunt tasks can be defined here\n└── vendor                  # <-- 3rd-party assets will be prepended or merged into the application\n    ├── js                  # <-- 3rd-party Javascript\n    │   └── underscore.js   # <-- Underscore, because underscore is fantastic.\n    ├── img                 # <-- 3rd-party images (are merged into the root of generated & dist)\n    └── css                 # <-- 3rd-party CSS\n\n```\n\n# About\n\n## the name\n\nLineman got its name from finding that the word \"grunt\" was first used to describe unskilled railroad workers. Grunts that made the cut were promoted to linemen.\n\n## the motivation\n\nMost fat-client web applications are still written as second-class denizens within server-side project directories. This has inhibited the formation of a coherent community of people who write applications HTML, CSS, and JavaScript, because the server-side technology is dominant. Front-end work on a Rails project differs greatly from front-end work on a Java project, even though they're building the same thing!\n\nAll we wanted was a cozy & productive application development tool that didn't saddle our client-side code with a particular server-side technology. Intentionally dividing backend and front-end projects applies a healthy pressure to decouple the two.\n\nIt doesn't hurt that with Lineman, we're able to bootstrap new client-side apps faster than we ever have before.\n\n## the terms\n\nLineman was created by [test double](http://testdouble.com), a software studio in Columbus, Ohio. It's distributed under the [MIT license](http://mit-license.org).",
  "_id": "lineman@0.1.0",
  "dist": {
    "shasum": "fe456683e964208e0102caea695db1a177d83e2a"
  },
  "_from": "lineman@0.1.0"
}
